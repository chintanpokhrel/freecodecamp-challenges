/*Careful with the below two, RECURSION */
const createArray = function(length) {
  let arr = new Array(length || 0);
  let i = length;

  if (arguments.length > 1) {
    let args = Array.prototype.slice.call(arguments, 1);
    while (i--) arr[length - i - 1] = createArray.apply(this, args);
  }

  return arr;
};

const cloneArray = function(arr) {
  let copy = [];
  if (Array.isArray(arr)) {
    let i = 0;
    while (i < arr.length) {
      copy.push(cloneArray(arr[i++]));
    }
  } else {
    copy = arr;
  }
  return copy;
};

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      generation: 1,
      m: 30,
      n: 30,
      life: createArray(30, 30),
      interval: 500,
      intervalId: 0,
      running: false
    };
    this.initArray = this.initArray.bind(this);
    this.applyRules = this.applyRules.bind(this);
    this.countLiveNeighbors = this.countLiveNeighbors.bind(this);
    this.handleStart = this.handleStart.bind(this);
    this.handlePause = this.handlePause.bind(this);
    this.handleClear = this.handleClear.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleGenerate = this.handleGenerate.bind(this);
    this.handleSpeedChange = this.handleSpeedChange.bind(this);
    this.handleResize = this.handleResize.bind(this);
  }

  initArray() {
    let num_fill = 0.3 * this.state.m * this.state.n;
    let life_copy = cloneArray(this.state.life);
    console.log(life_copy[0].length);
    for (let i = 0; i < num_fill; ++i) {
      let j = Math.floor(Math.random() * this.state.m);
      let k = Math.floor(Math.random() * this.state.n);
      life_copy[j][k] = true;
    }

    this.setState({
      life: life_copy
    });
  }

  componentDidMount() {
    this.initArray();
    this.handleStart();
  }

  componentWillUnmount() {
    clearInterval(this.state.intervalId);
  }

  countLiveNeighbors(i, j) {
    //1. Find out the neighbors that exist
    let life = this.state.life;
    let neighbors = 0;
    // Neighbors are normally
    //[i-1][j-1], [i-1][j], [i-1][j+1]
    //[i][j-1],           ,   [i][j+1]
    //[i+1][j-1], [i+1][j], [i+1][j+1]
    let vx = [],
      vy = [];
    let m = this.state.m;
    let n = this.state.n;

    if (i > 0 && i < m - 1) {
      vx.push(i - 1, i, i + 1);
    } else if (i > 0) {
      vx.push(i - 1, i);
    } else if (i < m - 1) {
      vx.push(i, i + 1);
    } else {
      vx.push(i);
    }

    if (j > 0 && j < n - 1) {
      vy.push(j - 1, j, j + 1);
    } else if (j > 0) {
      vy.push(j - 1, j);
    } else if (j < n - 1) {
      vy.push(j, j + 1);
    } else {
      vy.push(j);
    }

    //2. Count how many of them are alive
    for (let x = 0; x < vx.length; ++x) {
      for (let y = 0; y < vy.length; ++y) {
        if (!(vx[x] == i && vy[y] == j)) {
          neighbors += life[vx[x]][vy[y]] ? 1 : 0;
        }
      }
    }

    return neighbors;
  }

  applyRules() {
    /*
    if (this.state.generation == 0) {
      this.initArray();
      this.setState({
        generation: 1
      });
      return;
    }*/

    let life_copy = cloneArray(this.state.life);
    let life = this.state.life;

    for (let i = 0; i < this.state.m; ++i) {
      for (let j = 0; j < this.state.n; ++j) {
        let neighbors = this.countLiveNeighbors(i, j);
        //Overcrowding: if i,j is alive and neighbors > 3 then die due to overcrowding
        if (life[i][j] && neighbors > 3) {
          life_copy[i][j] = false;
        }

        //Isolation: if i, j is alive and neighbors < 2 then die due to isolation
        if (life[i][j] && neighbors < 2) {
          life_copy[i][j] = false;
        }

        //Birth: if i, j is dead but has 3 live neighbors, then take birth
        if (!life[i][j] && neighbors == 3) {
          //console.log(i+" "+j+" "+ neighbors);
          life_copy[i][j] = true;
        }
      }
    }

    this.setState({
      life: life_copy,
      generation: this.state.generation + 1
    });
  }

  handleStart() {
    //if game is off then switch it on
    if (!this.state.running) {
      let intervalId = setInterval(this.applyRules, this.state.interval);
      this.setState({
        intervalId: intervalId,
        running: true
      });
    }
  }

  handlePause() {
    if (this.state.running) {
      clearInterval(this.state.intervalId);
      this.setState({
        running: false
      });
    }
  }

  handleClear() {
    clearInterval(this.state.intervalId);
    this.setState({
      running: false,
      life: createArray(this.state.m, this.state.n),
      intervalId: 0,
      generation: 0
    });
  }
  
  //unused
  handleGenerate() {
    this.handleClear();
    this.initArray();    
    this.handleStart();
  }

  handleClick(i, j) {
    let life_copy = cloneArray(this.state.life);
    life_copy[i][j] = !(life_copy[i][j]);
    this.setState({
      life: life_copy
    });
  }

  handleSpeedChange(value){
    console.log("Triggering!");
    clearInterval(this.state.intervalId);
    if(this.state.running){
      let intervalId = setInterval(this.applyRules, value);
      this.setState({
        interval: value,
        intervalId: intervalId
      });
    }else{
        this.setState({
          interval: value
        });
    }
  }
  
  handleResize(m, n){
    this.handleClear();
    let arr = createArray(m, n);
    
    this.setState({
      m: m,
      n: n
    });
    
  }
  
  render() {
    let rows = [];
    for (let i = 0; i < this.state.m; ++i) {
      let cols = [];
      rows.push([]);
      for (let j = 0; j < this.state.n; ++j) {
        cols.push(
          <Cell life={this.state.life[i][j]} handleClick={this.handleClick} i={i} j={j}/>
        );
      }
      rows[i] = <tr>{cols}</tr>;
    }
    return (
      <div>
        <TopPanel handleStart={this.handleStart} handlePause={this.handlePause} handleClear={this.handleClear} generation={this.state.generation} />
        <table>{rows}</table>
        <BottomPanel speed={this.state.interval} handleSpeedChange={this.handleSpeedChange} m={this.state.m} n={this.state.n} handleResize={this.handleResize}  />
      </div>
    );
  }
}

class TopPanel extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    return (
        <div>
        <button onClick={this.props.handleStart}>Start</button>
        <button onClick={this.props.handlePause}>Pause</button>
        <button onClick={this.props.handleClear}>Clear</button>
        <label>Generations: {this.props.generation}</label>
        </div>
    );
  }
}

class Cell extends React.Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(){
    this.props.handleClick(this.props.i, this.props.j);    
  }

  render() {
    return (
      <td
        className={this.props.life ? "alive" : "dead"}
        onClick={this.handleClick}
      />
    );
  }
}

class BottomPanel extends React.Component {
  constructor(props){
    super(props);
  }
  
  render(){
    return (
      <div>
        {/*<SizeController m={this.props.m} n={this.props.n} handleClick={this.props.handleResize} />*/}
        <SpeedController speed={this.props.speed} handleClick={this.props.handleSpeedChange} />
      </div>
    );
  }
}

class SizeController extends React.Component{
  constructor(props){
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  
  handleClick(event){
    const mn = event.target.value.split('x');
    console.log(mn);
    this.props.handleClick(mn[0], mn[1]);
  }
  
  render(){
    return (
        <span className="board-size">
        {/*Board Size Controller*/}
        <label for="resize-1">50x50</label>
        <input type="radio" id="resize-1" name="board-size" value="50x50" checked={this.props.m+"x"+this.props.n == "50x50"} onClick={this.handleClick} />
        <label for="resize-2">40x60</label>
        <input type="radio" id="resize-2" name="board-size" value="40x60" checked={this.props.m+"x"+this.props.n == "40x60"} onClick={this.handleClick} />
        <label for="resize-3">60x70</label>
        <input type="radio" id="resize-3" name="board-size" value="60x70" checked={this.props.m+"x"+this.props.n == "60x70"} onClick={this.handleClick} />
        </span>
    );
  }
}

class SpeedController extends React.Component{
  constructor(props){
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  
  handleClick(event){
    this.props.handleClick(event.target.value);
  }
  
  render(){
        {/*Speed Controller*/}
    return(
        <span className="speed"> 
        <label for="fast">fast</label>
        <input type="radio" id="fast" name="speed" value="500" checked={this.props.speed==500} onClick={this.handleClick} />
        <label for="medium">medium</label>
        <input type="radio" id="medium" name="speed" value="1000" checked={this.props.speed==1000} onClick={this.handleClick} />
        <label for="resize-3">slow</label>
        <input type="radio" id="slow" name="speed" value="1500" checked={this.props.speed==1500} onClick={this.handleClick} />
        </span>
     );
  }
  
}

ReactDOM.render(<App />, document.getElementById("container"));
